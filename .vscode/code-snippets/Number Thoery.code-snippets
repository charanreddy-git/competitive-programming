{
	"GCD":{
		"prefix": "gcd",
		"body": [
			"int gcd(int a, int b) {",
			"    return b == 0 ? a : gcd(b, a % b);",
			"}"
		],
		"description": "Compute GCD using Euclidean algorithm"
	},
	"LCM":{
		"prefix": "lcm",
		"body": [
			"int lcm(int a, int b) {",
			"    return (a / gcd(a,b)) * b;",
			"}"
		],
		"description": "Compute GCD using Euclidean algorithm"
	},
	"Binary Exponentiation": {
	"prefix": "binpow",
	"body": [
		"int binpow(int a, int b) {",
		"    long long res = 1;",
		"    while (b > 0) {",
		"        if (b & 1)",
		"            res = res * a;",
		"        a = a * a;",
		"        b >>= 1;",
		"    }",
		"    return res;",
		"}"
	],
	"description": "Binary Exponentiation"
	},
	"prime factorization": {
		"prefix": "primefactorization",
		"body": [
			"vector<int> primefactorization(int n){",
			"    vector<int>factors;",
			"    for(int i = 2;i*i <= n;i++){",
			"        while(n%i == 0){",
			"            factors.push_back(i);",
			"            n /= i;",
			"        }",
			"    }",
			"    if(n > 1) factors.push_back(n);",
			"    return factors;",
			"}"
		],
		"description": "TC : sqrt(n)"
	},
	"Sieve of Eratosthenes": {
		"prefix": "sieve",
		"body": [
			"vector<bool>isprime(N+1,1);",
			"    isprime[0] = isprime[1] = 0;",
			"    for(int i = 2;i*i <= N;i++){",
			"        if(isprime[i]){",
			"            for(int j = i*i;j <= n;j += i){",
			"                isprime[j] = 0;",
			"            }",
			"        }",
			"    }"
		],
    	"description": "TC : n*log(logn)"
	},
	"Check Prime Number": {
		"prefix": "isprime",
		"body": [
			"bool isprime(int n) {",
			"    if (n < 2) return false;",
			"    if (n == 2 || n == 3) return true;",
			"    if (n % 2 == 0) return false;",
			"    for (int i = 3; i*i <= n; i += 2) {",
			"        if (n%i == 0) return false;",
			"    }",
			"    return true;",
			"}"
		],
		"description": "Checks if a number is prime"
	},
}
